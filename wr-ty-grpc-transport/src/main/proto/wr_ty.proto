syntax = "proto3";

package com.xh.demo.grpc;


message InstanceInfo {
    // what is instance's status
    enum Status {
        UP = 0;
        DOWN = 1;
        STARTING = 2;
        UNKNOWN = 3;
    }
    // where instance come from
    enum Origin {
        LOCAL = 0;
        REPLICATED = 1;
        BOOTSTRAP = 2;
        INTERESTED = 3;
    }
    // instance unique id
    string id = 1;
    Status status = 2;
    Origin origin = 3;
    map<string, string> metadata = 4;
    // create time
    int64 timeStamp = 5;

}

message Delta {
    message MetaData {
        map<string, string> metaData = 1;
    }
    message StringSet {
        repeated string values = 1;
    }

    message DeltaValue {
        oneof oneof_delta {
            string appGroup = 1;
            string app = 2;
            string asg = 3;
            string vipAddress = 4;
            string secureVipAddress = 5;
            InstanceInfo.Status status = 7;
            string homePageUrl = 8;
            string statusPageUrl = 9;
            StringSet healthCheckUrls = 10;
            MetaData MetaData = 11;
        }
    }

    string id = 1;
    DeltaValue deltaValue = 2;
}

message Interest {

    enum InterestOperator {
        Equal = 0;
        Like = 1;
    }

    message NoneInterest {
    }

    message AllInterest {
    }
    message InstanceInterest {
        InterestOperator operator = 1;
        string pattern = 2;
    }

    oneof interest_oneof {
        NoneInterest none = 1;
        AllInterest all = 2;
        InstanceInterest instance = 6;
    }
}

message Heartbeat {
}
message HeartbeatReply {
}
message ClientHello {
}

message ReplicationClientHello {
    int32 registrySize = 1;
}

message ServerHello {
}

message ReplicationServerHello {
}

message Acknowledgement {
}

message InterestRegistration {
    repeated Interest interests = 1;
}

message AddInstance {
    InstanceInfo instanceInfo = 1;
}

message DeleteInstance {
    string instanceId = 1;
}

message UpdateInstanceInfo {
    repeated Delta deltas = 1;
}


message ProtocolMessageEnvelope {
    enum ProtocolType {
        Registration = 0;
        Interest = 1;
        Replication = 2;
    }
    ProtocolType protocolType = 1;

    oneof message_oneOf {
        Acknowledgement acknowledgement = 2;
        HeartbeatReply heartbeatReply = 3;
        Heartbeat heartbeat = 4;
        ClientHello clientHello = 5;
        ReplicationClientHello replicationClientHello = 6;
        ServerHello serverHello = 7;
        ReplicationServerHello replicationServerHello = 8;
        InstanceInfo instanceInfo = 9;
        InterestRegistration interestRegistration = 10;
        AddInstance addInstance = 11;
        DeleteInstance deleteInstance = 12;
        UpdateInstanceInfo updateInstanceInfo = 13;
    }
}

message RegistrationRequest {
    oneof oneof_request {
        ClientHello clientHello = 1;
        InstanceInfo instanceInfo = 2;
        Heartbeat heartbeat = 3;
    }
}

message RegistrationResponse {
    oneof item {
        ServerHello serverHello = 1;
        Heartbeat heartbeat = 2;
        Acknowledgement ack = 3;
    }
}
// instance's DataSource change notification
message ChangeNotification {
    message AddChangeNotification {
        InstanceInfo instanceInfo = 1;
    }
    message ModifyChangeNotification {
        repeated Delta deltas = 1;
    }
    message DeleteChangeNotification {
        string instanceId = 1;
    }
    oneof notification_oneof {
        AddChangeNotification add = 1;
        ModifyChangeNotification modify = 2;
        DeleteChangeNotification delete = 3;
    }
}
message SubscribeRequest {
    oneof item {
        ClientHello clientHello = 1;
        Heartbeat heartbeat = 2;
        InterestRegistration interestRegistration = 3;
    }
}
message SubscribeResponse {
    oneof item {
        ServerHello serverHello = 1;
        Heartbeat heartbeat = 2;
        ChangeNotification changeNotification = 3;
    }
}

/**
 * Services
 */

service RegistrationService {

    rpc Register (stream RegistrationRequest) returns (stream RegistrationResponse) {
    }
}

service SubscribeService {
    rpc Subscribe (stream SubscribeRequest) returns (stream SubscribeResponse) {
    }
}
/**
 * special SubscribeService only Subscribe all
*/
service ReplicationService {
    rpc Subscribe (stream SubscribeRequest) returns (stream SubscribeResponse) {
    }
}